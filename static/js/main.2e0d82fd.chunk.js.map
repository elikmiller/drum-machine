{"version":3,"sources":["components/NoteToggleButton.js","components/TrackArray.js","components/PatternGrid.js","components/PlayButton.js","components/TempoControl.js","DrumMachine.js","components/DrumMachineContainer.js","App.js","index.js"],"names":["NoteToggleButton","isActive","isPlaying","onClick","style","height","minWidth","margin","borderRadius","backgroundColor","TrackArray","trackName","trackNotes","lastNotePlayed","toggleNote","display","justifyContent","alignItems","marginTop","padding","border","map","note","i","key","PatternGrid","pattern","className","Object","keys","track","PlayButton","type","onKeyDown","e","preventDefault","TempoControl","value","onChange","id","placeholder","aria-label","min","max","step","newTempo","parseFloat","target","DrumMachine","options","onTempoChange","onIsPlayingChange","onNotePlayed","onPatternChange","onLoadingDone","this","audioContext","AudioContext","unlocked","startTime","current16thNote","tempo","lookahead","scheduleAheadTime","nextNoteTime","noteLength","timerID","clap","clave","conga_hi","conga_mid","conga_low","cowbell","cymbal","hihat_closed","hihat_open","kick","maracas","rim","snare","tom_hi","tom_mid","tom_low","loading","audioData","tracks","loadTracks","push","axios","get","process","responseType","then","result","decodeAudioData","data","Promise","all","secondsPerBeat","beatNumber","time","source","createBufferSource","buffer","connect","destination","start","currentTime","scheduleNote","nextNote","resume","console","log","setInterval","scheduler","clearInterval","DrumMachineContainer","drumMachine","useRef","useState","setTempo","setIsPlaying","setLastNotePlayed","setPattern","setLoading","useEffect","current","noteIndex","togglePlaybackOnSpacebarPress","togglePlayback","window","addEventListener","removeEventListener","startStop","uk-spinner","newPattern","assign","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e0d82fd.chunk.js","sourcesContent":["import React from \"react\";\n\nconst NoteToggleButton = ({ isActive, isPlaying, onClick }) => {\n  return (\n    <div\n      style={{\n        height: \"16px\",\n        minWidth: \"16px\",\n        margin: \"0 8px\",\n        borderRadius: \"1px\",\n        backgroundColor: isPlaying ? \"#1e87f0\" : isActive ? \"#32d296\" : \"#f8f8f8\",\n      }}\n      onClick={onClick}\n    ></div>\n  );\n};\n\nexport default NoteToggleButton;\n","import React from \"react\";\nimport NoteToggleButton from \"./NoteToggleButton\";\n\nconst TrackArray = ({ trackName, trackNotes, lastNotePlayed, isPlaying, toggleNote }) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        marginTop: \"10px\",\n        padding: \"5px\",\n        border: \"1px solid rgba(255, 255, 255, 0.75)\",\n        borderRadius: \"4px\",\n      }}\n    >\n      <div style={{ minWidth: \"96px\" }}>{trackName}</div>\n      {trackNotes.map((note, i) => (\n        <NoteToggleButton key={i} isActive={note} isPlaying={(i + 1) % 16 === lastNotePlayed} onClick={() => toggleNote(trackName, i)} />\n      ))}\n    </div>\n  );\n};\n\nexport default TrackArray;\n","import React from \"react\";\nimport TrackArray from \"./TrackArray\";\n\nconst PatternGrid = ({ pattern, lastNotePlayed, isPlaying, toggleNote }) => {\n  return (\n    <div className=\"uk-margin-small uk-background-secondary uk-light uk-padding\">\n      {Object.keys(pattern).map((track) => (\n        <TrackArray\n          key={track}\n          trackName={track}\n          trackNotes={pattern[track]}\n          lastNotePlayed={lastNotePlayed}\n          isPlaying={isPlaying}\n          toggleNote={toggleNote}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default PatternGrid;\n","import React from \"react\";\n\nconst PlayButton = ({ isPlaying, onClick }) => {\n  return (\n    <div className=\"play-button-component\">\n      <button\n        type=\"button\"\n        className=\"uk-button uk-button-primary\"\n        onClick={onClick}\n        onKeyDown={(e) => {\n          if (e.key === \" \") e.preventDefault();\n        }}\n      >\n        {isPlaying ? \"Stop\" : \"Play\"}\n      </button>\n    </div>\n  );\n};\n\nexport default PlayButton;\n","import React from \"react\";\n\nconst TempoControl = ({ value, onChange }) => {\n  const handleTempoChange = (e) => {\n    let newTempo = parseFloat(e.target.value);\n    onChange(newTempo);\n  };\n\n  return (\n    <div className=\"tempo-control-component\">\n      <div className=\"uk-form-controls\">\n        <input\n          id=\"tempo\"\n          className=\"uk-input\"\n          type=\"number\"\n          placeholder=\"Tempo\"\n          aria-label=\"Tempo\"\n          min={20}\n          max={300}\n          step={1}\n          value={value}\n          onChange={handleTempoChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default TempoControl;\n","import axios from \"axios\";\n\nclass DrumMachine {\n  constructor(\n    options = {\n      onTempoChange: () => {},\n      onIsPlayingChange: () => {},\n      onNotePlayed: () => {},\n      onPatternChange: () => {},\n      onLoadingDone: () => {},\n    }\n  ) {\n    this.audioContext = new AudioContext();\n    this.unlocked = false;\n    this.isPlaying = false; // Are we currently playing?\n    this.startTime = null; // The start time of the entire sequence.\n    this.current16thNote = null; // What note is currently last scheduled?\n    this.tempo = 80.0; // tempo (bpm)\n    this.lookahead = 25.0; // How frequently to call scheduling function (ms)\n    this.scheduleAheadTime = 0.1; // How far ahead to schedule audio (s)\n    this.nextNoteTime = 0.0; // when the next note is due.\n    this.noteLength = 0.05; // length of \"beep\" (in seconds)\n    this.timerID = null; // setInterval id\n    this.pattern = {\n      clap: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      clave: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      conga_hi: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      conga_mid: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      conga_low: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      cowbell: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      cymbal: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      hihat_closed: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      hihat_open: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      kick: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      maracas: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      rim: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      snare: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      tom_hi: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      tom_mid: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      tom_low: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n    };\n\n    // callbacks\n    this.onTempoChange = options.onTempoChange;\n    this.onIsPlayingChange = options.onIsPlayingChange;\n    this.onNotePlayed = options.onNotePlayed;\n    this.onPatternChange = options.onPatternChange;\n    this.onLoadingDone = options.onLoadingDone;\n\n    // sounds\n    this.loading = true;\n    this.audioData = {};\n    let tracks = [\n      \"clap\",\n      \"clave\",\n      \"conga_hi\",\n      \"conga_mid\",\n      \"conga_low\",\n      \"cowbell\",\n      \"cymbal\",\n      \"hihat_closed\",\n      \"hihat_open\",\n      \"kick\",\n      \"maracas\",\n      \"rim\",\n      \"snare\",\n      \"tom_hi\",\n      \"tom_mid\",\n      \"tom_low\",\n    ];\n    let loadTracks = [];\n    for (let track of tracks) {\n      loadTracks.push(\n        axios\n          .get(process.env.PUBLIC_URL + `/clips/${track}.mp3`, {\n            responseType: \"arraybuffer\",\n          })\n          .then((result) => {\n            return this.audioContext.decodeAudioData(result.data);\n          })\n          .then((result) => {\n            this.audioData[track] = result;\n          })\n      );\n    }\n    Promise.all(loadTracks).then(() => {\n      this.loading = false;\n      this.onLoadingDone();\n    });\n  }\n\n  nextNote() {\n    // Advance current note and time by a 16th note...\n    var secondsPerBeat = 60.0 / this.tempo; // Notice this picks up the CURRENT\n    // tempo value to calculate beat length.\n    this.nextNoteTime += 0.25 * secondsPerBeat; // Add beat length to last beat time\n\n    this.current16thNote++; // Advance the beat number, wrap to zero\n    if (this.current16thNote === 16) {\n      this.current16thNote = 0;\n    }\n    this.onNotePlayed(this.current16thNote);\n  }\n\n  scheduleNote(beatNumber, time) {\n    for (let track in this.pattern) {\n      if (!this.pattern[track][beatNumber]) continue;\n      let source = this.audioContext.createBufferSource();\n      source.buffer = this.audioData[track];\n      source.connect(this.audioContext.destination);\n      source.start(time);\n    }\n  }\n\n  scheduler() {\n    // while there are notes that will need to play before the next interval,\n    // schedule them and advance the pointer.\n    while (this.nextNoteTime < this.audioContext.currentTime + this.scheduleAheadTime) {\n      this.scheduleNote(this.current16thNote, this.nextNoteTime);\n      this.nextNote();\n    }\n  }\n\n  setTempo(tempo) {\n    this.tempo = tempo;\n    this.onTempoChange(this.tempo);\n  }\n\n  setPattern(pattern) {\n    this.pattern = pattern;\n    this.onPatternChange(this.pattern);\n  }\n\n  startStop() {\n    if (!this.unlocked) {\n      this.unlocked = true;\n      this.audioContext.resume();\n    }\n\n    this.isPlaying = !this.isPlaying;\n\n    console.log(this.isPlaying);\n\n    if (this.isPlaying) {\n      this.current16thNote = 0;\n      this.nextNoteTime = this.audioContext.currentTime + 0.1;\n      this.timerID = setInterval(() => this.scheduler(), this.lookahead);\n    } else {\n      clearInterval(this.timerID);\n      this.timerID = null;\n    }\n\n    this.onIsPlayingChange(this.isPlaying);\n  }\n}\n\nexport default DrumMachine;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport PatternGrid from \"./PatternGrid\";\nimport PlayButton from \"./PlayButton\";\nimport TempoControl from \"./TempoControl\";\nimport DrumMachine from \"../DrumMachine\";\n\nconst DrumMachineContainer = () => {\n  const drumMachine = useRef(null);\n  const [tempo, setTempo] = useState(80);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [lastNotePlayed, setLastNotePlayed] = useState(null);\n  const [pattern, setPattern] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    drumMachine.current = new DrumMachine({\n      onTempoChange: (tempo) => {\n        setTempo(tempo);\n      },\n      onIsPlayingChange: (isPlaying) => {\n        setIsPlaying(isPlaying);\n      },\n      onNotePlayed: (noteIndex) => {\n        setLastNotePlayed(noteIndex);\n      },\n      onPatternChange: (pattern) => {\n        setPattern(pattern);\n      },\n      onLoadingDone: () => {\n        setLoading(false);\n      },\n    });\n    setTempo(drumMachine.current.tempo);\n    setIsPlaying(drumMachine.current.isPlaying);\n    setLastNotePlayed(drumMachine.current.current16thNote);\n    setPattern(drumMachine.current.pattern);\n  }, []);\n\n  useEffect(() => {\n    const togglePlaybackOnSpacebarPress = (e) => {\n      if (e.key === \" \") {\n        togglePlayback();\n      }\n    };\n    window.addEventListener(\"keydown\", togglePlaybackOnSpacebarPress);\n    return () => {\n      window.removeEventListener(\"keydown\", togglePlaybackOnSpacebarPress);\n    };\n  }, []);\n\n  const togglePlayback = () => {\n    drumMachine.current.startStop();\n  };\n\n  const toggleNote = (track, noteIndex) => {\n    const newPattern = Object.assign({}, pattern);\n    newPattern[track][noteIndex] = !newPattern[track][noteIndex];\n    drumMachine.current.setPattern(newPattern);\n  };\n\n  return (\n    <>\n      <div className=\"uk-flex uk-background-muted uk-margin-small uk-flex-middle\">\n        <div className=\"uk-padding-small\">Drum Machine App</div>\n        <div className=\"uk-flex-1\"></div>\n        <div className=\"uk-padding-small\">\n          <TempoControl value={tempo} onChange={(tempo) => drumMachine.current.setTempo(tempo)} />\n        </div>\n        <div className=\"uk-padding-small\">\n          <PlayButton isPlaying={isPlaying} onClick={togglePlayback} />\n        </div>\n      </div>\n      {loading ? (\n        <div className=\"uk-margin uk-text-center\">\n          <div uk-spinner={\"true\"}></div>\n        </div>\n      ) : (\n        <PatternGrid pattern={pattern} lastNotePlayed={lastNotePlayed} isPlaying={isPlaying} toggleNote={toggleNote} />\n      )}\n    </>\n  );\n};\n\nexport default DrumMachineContainer;\n","import React from \"react\";\nimport DrumMachineContainer from \"./components/DrumMachineContainer\";\n\nconst App = () => {\n  return (\n    <div className=\"uk-container uk-container-small\">\n      <div className=\"uk-margin-auto\">\n        <DrumMachineContainer />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"../node_modules/uikit/dist/css/uikit.min.css\";\nimport \"../node_modules/uikit/dist/js/uikit.min.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}