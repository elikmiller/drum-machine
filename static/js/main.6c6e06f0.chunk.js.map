{"version":3,"sources":["AudioContext.js","DrumMachine.js","App.js","serviceWorker.js","index.js"],"names":["_audioContext","AudioContext","ReactAudioContext","React","createContext","audioData","clips","playSound","clip","start","currentTime","source","createBufferSource","buffer","connect","destination","AudioContextProvider","children","useState","tempo","setTempo","sequence","hihat","snare_a","kick_a","useEffect","axios","get","process","responseType","then","result","decodeAudioData","data","Provider","value","playSequence","i","Object","keys","useAudioContext","context","useContext","undefined","Error","Pad","audioContext","className","onMouseDown","type","DrumMachine","map","Fragment","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8QAGMA,EAAgB,IAAIC,aACpBC,EAAoBC,IAAMC,gBAE5BC,EAAY,GACVC,EAAQ,CACZ,QACA,UACA,UACA,UACA,QACA,aACA,SACA,SACA,aACA,OACA,UACA,UACA,SACA,WACA,UACA,WAGIC,EAAY,SAACC,GAAqB,IAAfC,EAAc,uDAAN,EAC3BC,EAAcV,EAAcU,YAC5BC,EAASX,EAAcY,qBAC3BD,EAAOE,OAASR,EAAUG,GAC1BG,EAAOG,QAAQd,EAAce,aACf,IAAVN,EAAaE,EAAOF,MAAM,GACzBE,EAAOF,MAAMC,EAAcD,IAG5BO,EAAuB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACnBC,mBAAS,IADU,mBACtCC,EADsC,KAC/BC,EAD+B,KAEvCC,EAAW,CACfC,MAAO,EACL,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GAEFC,QAAS,EACP,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GAEFC,OAAQ,EACN,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAGJC,qBAAU,WAAO,IAAD,uBACd,IADc,IACd,EADc,iBACLjB,EADK,QAEZkB,IACGC,IAAIC,gBAAA,iBAAmCpB,EAAnC,QAA+C,CAClDqB,aAAc,gBAEfC,MAAK,SAACC,GACL,OAAO/B,EAAcgC,gBAAgBD,EAAOE,SAE7CH,MAAK,SAACC,GACL1B,EAAUG,GAAQuB,MATxB,EAAiBzB,EAAjB,+CAAyB,IADX,qFAab,IAYH,OACE,kBAACJ,EAAkBgC,SAAnB,CACEC,MAAO,CAAEnC,gBAAemB,QAAOC,WAAUd,QAAOC,YAAW6B,aAZ1C,WACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtB,cAAiBC,OAAOC,KAAKlB,GAA7B,eAAwC,CAAnC,IAAIb,EAAI,KACPa,EAASb,GAAM6B,IACjB9B,EAAUC,EAAO,IAAc,EAARW,GAAckB,OAUxCpB,IAKDuB,EAAkB,WACtB,IAAMC,EAAUC,qBAAWxC,GAC3B,QAAgByC,IAAZF,EACF,MAAM,IAAIG,MACR,+DAGJ,OAAOH,GCnIHI,EAAM,SAAC,GAAc,IAAZrC,EAAW,EAAXA,KACPsC,EAAeN,IACrB,OAAKhC,EAOH,4BACEuC,UAAU,MACVC,YAAa,WACXF,EAAavC,UAAUC,IAEzByC,KAAK,UAEJzC,GAZD,4BAAQuC,UAAU,MAAME,KAAK,UAC3B,4CAoCOC,EApBK,WAClB,IAAMJ,EAAeN,IAErB,OACE,yBAAKO,UAAU,eACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,oBACb,wCADF,WAGCD,EAAaxC,MAAM6C,KAAI,SAAC3C,EAAM6B,GAAP,OACtB,kBAAC,IAAMe,SAAP,CAAgBC,IAAKhB,GACnB,kBAAC,EAAD,CAAK7B,KAAMA,KACT6B,EAAI,GAAK,IAAM,GAAK,oCCrBnBiB,G,MAVH,WACV,OACE,6BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,UCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.6c6e06f0.chunk.js","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst _audioContext = new AudioContext();\nconst ReactAudioContext = React.createContext();\n\nlet audioData = {};\nconst clips = [\n  \"china\",\n  \"crash_a\",\n  \"crash_b\",\n  \"crash_c\",\n  \"hihat\",\n  \"hihat_open\",\n  \"kick_a\",\n  \"kick_b\",\n  \"kick_ghost\",\n  \"ride\",\n  \"snare_a\",\n  \"snare_b\",\n  \"splash\",\n  \"tom_high\",\n  \"tom_low\",\n  \"tom_mid\",\n];\n\nconst playSound = (clip, start = 0) => {\n  let currentTime = _audioContext.currentTime;\n  let source = _audioContext.createBufferSource();\n  source.buffer = audioData[clip];\n  source.connect(_audioContext.destination);\n  if (start === 0) source.start(0);\n  else source.start(currentTime + start);\n};\n\nconst AudioContextProvider = ({ children }) => {\n  const [tempo, setTempo] = useState(90);\n  const sequence = {\n    hihat: [\n      true,\n      false,\n      true,\n      false,\n      true,\n      false,\n      true,\n      false,\n      true,\n      false,\n      true,\n      false,\n      true,\n      false,\n      true,\n      false,\n    ],\n    snare_a: [\n      false,\n      false,\n      false,\n      false,\n      true,\n      false,\n      false,\n      false,\n      false,\n      false,\n      false,\n      false,\n      true,\n      false,\n      false,\n      false,\n    ],\n    kick_a: [\n      true,\n      false,\n      false,\n      false,\n      false,\n      false,\n      false,\n      false,\n      true,\n      false,\n      false,\n      false,\n      false,\n      false,\n      false,\n      false,\n    ],\n  };\n  useEffect(() => {\n    for (let clip of clips) {\n      axios\n        .get(process.env.PUBLIC_URL + `/clips/${clip}.wav`, {\n          responseType: \"arraybuffer\",\n        })\n        .then((result) => {\n          return _audioContext.decodeAudioData(result.data);\n        })\n        .then((result) => {\n          audioData[clip] = result;\n        });\n    }\n  }, []);\n\n  const playSequence = () => {\n    for (let i = 0; i < 16; i++) {\n      for (let clip of Object.keys(sequence)) {\n        if (sequence[clip][i]) {\n          playSound(clip, (60 / (tempo * 4)) * i);\n        }\n      }\n    }\n  };\n\n  return (\n    <ReactAudioContext.Provider\n      value={{ _audioContext, tempo, setTempo, clips, playSound, playSequence }}\n    >\n      {children}\n    </ReactAudioContext.Provider>\n  );\n};\n\nconst useAudioContext = () => {\n  const context = useContext(ReactAudioContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useAudioContext must be used within an AudioContextProvider\"\n    );\n  }\n  return context;\n};\n\nexport { AudioContextProvider as default, useAudioContext };\n","import React from \"react\";\nimport { useAudioContext } from \"./AudioContext\";\n\nconst Pad = ({ clip }) => {\n  const audioContext = useAudioContext();\n  if (!clip)\n    return (\n      <button className=\"Pad\" type=\"button\">\n        <em>Unassigned</em>\n      </button>\n    );\n  return (\n    <button\n      className=\"Pad\"\n      onMouseDown={() => {\n        audioContext.playSound(clip);\n      }}\n      type=\"button\"\n    >\n      {clip}\n    </button>\n  );\n};\n\nconst DrumMachine = () => {\n  const audioContext = useAudioContext();\n\n  return (\n    <div className=\"DrumMachine\">\n      <div className=\"PadController\">\n        <div className=\"DrumMachine-logo\">\n          <strong>DRUM</strong>MACHINE\n        </div>\n        {audioContext.clips.map((clip, i) => (\n          <React.Fragment key={i}>\n            <Pad clip={clip} />\n            {(i + 1) % 4 === 0 && <br />}\n          </React.Fragment>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default DrumMachine;\n","import React from \"react\";\nimport AudioContextProvider from \"./AudioContext\";\nimport DrumMachine from \"./DrumMachine\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div>\n      <AudioContextProvider>\n        <DrumMachine />\n      </AudioContextProvider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}